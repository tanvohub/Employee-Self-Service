/*! ess - v - 2018-01-26 */
function alertCtrl($scope, $timeout, $filter, appProps, modals, alertInfoApi) {
    function init() {
        return $scope.state = angular.extend(initialState), getAlertInfo();
    }
    function getAlertInfo() {
        function onSuccess(resp) {
            $scope.state.alertInfo = resp.result, $scope.state.alertInfo.homePhone = $filter("phoneNumber")($scope.state.alertInfo.homePhone), 
            $scope.state.alertInfo.mobilePhone = $filter("phoneNumber")($scope.state.alertInfo.mobilePhone), 
            $scope.state.alertInfo.alternatePhone = $filter("phoneNumber")($scope.state.alertInfo.alternatePhone);
        }
        function postRequest() {
            $scope.state.request.loadingAlertInfo = !1;
        }
        var params = {
            empId: $scope.state.empId
        };
        return $scope.state.request.loadingAlertInfo = !0, alertInfoApi.get(params, onSuccess, $scope.handleErrorResponse).$promise.finally(postRequest);
    }
    function saveAlertInfo() {
        function onSuccess() {}
        function onFail(resp) {
            "INVALID_ALERT_INFO" === resp.data.errorCode && "INVALID_EMAIL" === resp.data.errorData.alertErrorCode ? ($scope.errorData = resp.data.errorData.alertErrorData, 
            modals.open("invalid-email-dialog")) : $scope.handleErrorResponse();
        }
        function postRequest() {
            $scope.state.request.savingAlertInfo = !1;
        }
        return $scope.state.request.savingAlertInfo = !0, ensureMobileOptions(), alertInfoApi.save({}, $scope.state.alertInfo, onSuccess, onFail).$promise.then(init).then(setSaved).finally(postRequest);
    }
    function setSaved() {
        $scope.state.saved = !0, $timeout(function() {
            $scope.state.saved = !1;
        });
    }
    function ensureMobileOptions() {
        var alertInfo = $scope.state.alertInfo;
        if (!$scope.validMobileOptions()) throw {
            message: "Attempt to post alert info with invalid mobile options",
            alertInfo: alertInfo
        };
        alertInfo.mobileCallable || alertInfo.mobileTextable || (alertInfo.mobileCallable = !0, 
        alertInfo.mobileTextable = !0);
    }
    $scope.telPattern = /^ *(\([0-9]{3}\)|[0-9]{3} *-?) *[0-9]{3} *-? *[0-9]{4} *$/, 
    $scope.emailPattern = /^.*@.*\.[A-z]{2,}$/, $scope.phoneErrorMsg = "Please enter a valid phone number", 
    $scope.emailErrorMsg = "Please enter a valid email address";
    var phoneNumberFields = [ "workPhone", "homePhone", "alternatePhone", "mobilePhone" ], emailFields = [ "workEmail", "personalEmail", "alternateEmail" ], initialState = {
        name: appProps.user.fullName,
        empId: appProps.user.employeeId,
        request: {},
        alertInfo: null
    };
    init(), $scope.saveAlertInfo = saveAlertInfo, $scope.isLoading = function() {
        var loading = !1;
        return angular.forEach($scope.state.request, function(status) {
            loading = loading || status;
        }), loading;
    }, $scope.validMobileOptions = function() {
        var alertInfo = $scope.state.alertInfo;
        return !alertInfo.mobilePhone || (!alertInfo.mobilePhone || alertInfo.mobileCallable || alertInfo.mobileTextable);
    }, $scope.noDuplicatePhoneNumbers = function() {
        var phoneNumberSet = {};
        for (var i in phoneNumberFields) if (phoneNumberFields.hasOwnProperty(i)) {
            var phoneNumber = $scope.state.alertInfo[phoneNumberFields[i]], formattedPhoneNumber = (phoneNumber || "").replace(/[^\d]+/g, "");
            if (formattedPhoneNumber) {
                if (phoneNumberSet.hasOwnProperty(formattedPhoneNumber)) return !1;
                phoneNumberSet[formattedPhoneNumber] = !0;
            }
        }
        return !0;
    }, $scope.noDuplicateEmails = function() {
        var emailSet = {};
        for (var i in emailFields) if (emailFields.hasOwnProperty(i)) {
            var email = $scope.state.alertInfo[emailFields[i]], formattedEmail = (email || "").replace(/^\s+|\s+$/g, "").toLowerCase();
            if (formattedEmail) {
                if (emailSet.hasOwnProperty(formattedEmail)) return !1;
                emailSet[formattedEmail] = !0;
            }
        }
        return !0;
    }, $scope.validAlertInfo = function() {
        return $scope.validMobileOptions() && $scope.noDuplicatePhoneNumbers() && $scope.noDuplicateEmails();
    };
}

var essTime = angular.module("essMyInfo");

essApp.controller("MyInfoMainCtrl", [ "$scope", "$q", "appProps", "badgeService", "AckDocApi", "AcknowledgmentApi", function($scope, $q, appProps, badgeService, ackDocApi, ackApi) {
    $scope.updateAckBadge = function() {
        function setAcks(resp) {
            angular.forEach(resp.acknowledgments, function(ack) {
                acks[ack.ackDocId] = ack;
            });
        }
        function setDocs(resp) {
            docs = resp.documents;
        }
        function setCount() {
            var count = 0;
            angular.forEach(docs, function(doc) {
                acks.hasOwnProperty(doc.id) || count++;
            }), badgeService.setBadgeValue("unacknowledgedDocuments", count);
        }
        var docs = [], acks = {}, params = {
            empId: appProps.user.employeeId
        }, requests = [ ackDocApi.get({}, setDocs, $scope.handleErrorResponse).$promise, ackApi.get(params, setAcks, $scope.handleErrorResponse).$promise ];
        $q.all(requests).then(setCount);
    }, $scope.updateAckBadge();
} ]);

var essMyInfo = angular.module("essMyInfo");

essMyInfo.controller("EmpCheckHistoryCtrl", [ "$scope", "$filter", "appProps", "EmpCheckHistoryApi", "EmpActiveYearsApi", "modals", function($scope, $filter, appProps, EmpCheckHistoryApi, EmpActiveYearsApi, modals) {
    function initYtdValues(paychecks) {
        $scope.ytd = angular.extend({}, initialYtd);
        for (var i = 0; i < paychecks.length; i++) {
            var paycheck = paychecks[i];
            $scope.ytd.gross += paycheck.grossIncome, $scope.ytd.directDeposit += paycheck.directDepositAmount, 
            $scope.ytd.check += paycheck.checkAmount;
            for (var key in paycheck.deductions) paycheck.deductions.hasOwnProperty(key) && addDeductionToYtd(paycheck.deductions[key]);
        }
        $scope.ytd.check > 0 && ($scope.checkPresent = !0), $scope.ytd.directDeposit > 0 && ($scope.dirDepositPresent = !0);
    }
    function initDeductionCols(paychecks) {
        var deductionList = [], deductionCodeMap = {};
        angular.forEach(paychecks, function(paycheck) {
            angular.forEach(paycheck.deductions, function(deduction) {
                deduction.code && !deductionCodeMap.hasOwnProperty(deduction.code) && (deductionList.push(deduction), 
                deductionCodeMap[deduction.code] = !0);
            });
        }), $scope.deductionCols = deductionList.sort(function(a, b) {
            return getDeductCodeOrder(a) - getDeductCodeOrder(b);
        }).map(function(deduction) {
            return deduction.description;
        });
    }
    function initDeductionMap(paychecks) {
        for (var i = 0; i < paychecks.length; i++) {
            var checkDeductMap = paychecks[i].deductions;
            for (var key in checkDeductMap) checkDeductMap.hasOwnProperty(key) && addToDeductionSet(checkDeductMap[key]);
        }
    }
    function addToDeductionSet(deduction) {
        $scope.deductionMap.hasOwnProperty(deduction.description) || ($scope.deductionMap[deduction.description] = !0);
    }
    function addDeductionToYtd(deduction) {
        $scope.ytd[deduction.description] ? $scope.ytd[deduction.description] += deduction.amount : $scope.ytd[deduction.description] = deduction.amount;
    }
    function addDeductionsToPaychecks(paychecks) {
        for (var i = 0; i < paychecks.length; i++) for (var deductionKey in $scope.deductionMap) $scope.deductionMap.hasOwnProperty(deductionKey) && (paychecks[i].deductions.hasOwnProperty(deductionKey) || (paychecks[i].deductions[deductionKey] = createEmptyDeduction()));
    }
    function createEmptyDeduction() {
        return {
            amount: 0
        };
    }
    function getDeductCodeOrder(deduction) {
        var order = $scope.deductionCodes.indexOf(deduction.code);
        return order < 0 ? Number.MAX_VALUE : order;
    }
    $scope.deductionMap = {}, $scope.deductionCodes = [ 5, 6, 8, 7, 11, 514, 12, 546, 548, 502, 519, 301, 303, 302, 410, 321, 416, 418, 10, 661, 663, 18, 9, 4, 850, 851, 3, 326, 327, 427, 355, 422, 421, 428, 0 ].map(function(num) {
        return $filter("zeroPad")(num, 3);
    }), $scope.deductionCols = [], $scope.checkHistory = {
        searching: !1,
        useFiscalYears: !1,
        recordYears: null,
        recordFiscalYears: null,
        year: null
    }, $scope.dirDepositPresent = !1, $scope.checkPresent = !1;
    var initialYtd = {
        gross: 0,
        directDeposit: 0,
        check: 0
    };
    $scope.ytd = null, $scope.init = function() {
        $scope.checkHistory.recordYears = appProps.empActiveYears, $scope.checkHistory.year = $scope.checkHistory.recordYears[$scope.checkHistory.recordYears.length - 1], 
        $scope.getRecords(), $scope.getActiveDates();
    }, $scope.getRecords = function() {
        $scope.checkHistory.searching = !0, $scope.paychecks = [];
        var empId = appProps.user.employeeId, params = {
            empId: empId,
            year: $scope.checkHistory.year,
            fiscalYear: $scope.checkHistory.useFiscalYears
        };
        EmpCheckHistoryApi.get(params, function(response) {
            $scope.paychecks = response.paychecks.sort(function(a, b) {
                return new Date(a.checkDate) - new Date(b.checkDate);
            }), initDeductionMap(response.paychecks), addDeductionsToPaychecks(response.paychecks), 
            initYtdValues(response.paychecks), initDeductionCols(response.paychecks), $scope.checkHistory.searching = !1;
        }, function(response) {
            $scope.checkHistory.searching = !1, modals.open("500", {
                details: response
            });
        });
    }, $scope.getActiveDates = function() {
        EmpActiveYearsApi.get({
            empId: appProps.user.employeeId,
            fiscalYear: !0
        }, function(response) {
            $scope.checkHistory.recordFiscalYears = response.activeYears;
        }, function(errorResponse) {
            modals.open("500", {
                details: errorResponse
            });
        });
    }, $scope.onFiscalYearSwitch = function() {
        var yearArray = $scope.checkHistory.useFiscalYears ? $scope.checkHistory.recordFiscalYears : $scope.checkHistory.recordYears;
        $scope.checkHistory.year = yearArray[yearArray.length - 1], $scope.getRecords();
    }, $scope.isSignificantChange = function(curr, previous) {
        return void 0 !== previous && Math.abs(curr - previous) > .03;
    }, $scope.init();
} ]);

var essMyInfo = angular.module("essMyInfo");

essMyInfo.filter("formatDeductionHeader", function() {
    return function(input, scope) {
        if (null !== input) return input.replace(/\w\S*/g, function(txt) {
            return txt = txt.replace(":", ""), txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
    };
}), function() {
    function acknowledgmentCtrl($scope, $routeParams, $q, $location, $window, $timeout, $sce, bowser, appProps, modals, documentApi, ackApi) {
        function init() {
            bindWindowScrollHandler(), $scope.state = angular.copy(initialState), $scope.state.docId = $routeParams.ackDocId, 
            $q.all([ getDocument(), getAcknowledgments() ]).then(processAcknowledgment);
        }
        function getDocument() {
            function onSuccess(resp) {
                $scope.state.document = resp.document, $scope.state.docFound = !0, $scope.state.docRead = !1, 
                setDocEmbedHeight(), $timeout(checkIfDocRead, 500);
            }
            function onFail(resp) {
                $scope.state.docFound = !1, resp && resp.data && "ACK_DOC_NOT_FOUND" === resp.data.errorCode || $scope.handleErrorResponse(resp);
            }
            $scope.state.document = null;
            var params = {
                ackDocId: $scope.state.docId
            };
            return $scope.state.request.document = !0, documentApi.get(params, onSuccess, onFail).$promise.finally(function() {
                $scope.state.request.document = !1;
            });
        }
        function getAcknowledgments() {
            function onSuccess(resp) {
                angular.forEach(resp.acknowledgments, function(ack) {
                    $scope.state.acknowledgments[ack.ackDocId] = ack;
                });
            }
            $scope.state.acknowledgments = {};
            var params = {
                empId: appProps.user.employeeId
            };
            return $scope.state.request.ackGet = !0, ackApi.get(params, onSuccess, $scope.handleErrorResponse).$promise.finally(function() {
                $scope.state.request.ackGet = !1;
            });
        }
        function postAcknowledgment() {
            var params = {
                empId: appProps.user.employeeId,
                ackDocId: $scope.state.document.id
            };
            return $scope.state.request.ackPost = !0, ackApi.save(params, {}, init, $scope.handleErrorResponse).$promise.finally(function() {
                $scope.state.request.ackPost = !1;
            });
        }
        function processAcknowledgment() {
            var acknowledgments = $scope.state.acknowledgments, docId = $scope.state.document.id;
            if (acknowledgments.hasOwnProperty(docId)) {
                var ack = acknowledgments[docId];
                $scope.state.ackTimestamp = ack.timestamp, $scope.state.acknowledged = !0;
            } else $scope.state.acknowledged = !1;
        }
        function setDocEmbedHeight() {
            var document = $scope.state.document, heightFactor = document.totalHeight / document.maxWidth;
            $scope.state.docHeight = 840 * heightFactor;
        }
        function bindWindowScrollHandler() {
            windowScrollBound || (angular.element($window).on("scroll", checkIfDocRead), $scope.$on("$destroy", function() {
                angular.element($window).off("scroll", checkIfDocRead);
            }));
        }
        function checkIfDocRead() {
            windowAtBottom() && ($scope.state.docRead = !0, $scope.$apply());
        }
        function windowAtBottom() {
            var windowHeight = "innerHeight" in window ? window.innerHeight : document.documentElement.offsetHeight, body = document.body, html = document.documentElement, docHeight = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
            return windowHeight + window.pageYOffset >= docHeight;
        }
        $scope.ackDocPageUrl = appProps.ctxPath + "/myinfo/personnel/acknowledgments";
        var windowScrollBound = !1, initialState = {
            docId: null,
            document: null,
            acknowledgments: {},
            acknowledged: !1,
            ackTimestamp: null,
            docFound: !1,
            docHeight: 500,
            docRead: !1,
            request: {
                document: !1,
                ackGet: !1,
                ackPost: !1
            }
        };
        $scope.isLoading = function() {
            var loading = !1;
            return angular.forEach($scope.state.request, function(status) {
                loading = loading || status;
            }), loading;
        }, $scope.acknowledgeDocument = function() {
            modals.open("acknowledge-prompt").then(function() {
                return postAcknowledgment();
            }).then(function() {
                return $scope.updateAckBadge(), modals.open("acknowledge-success");
            }).then(function() {
                $location.url($scope.ackDocPageUrl);
            });
        }, $scope.useIframe = function() {
            return bowser.msedge;
        }, $scope.useOverlay = function() {
            return bowser.chrome;
        }, $scope.hideEmbed = function() {
            return bowser.msie && modals.isOpen();
        }, $scope.getDocUrl = function() {
            var baseUrl = $scope.ctxPath + $scope.state.document.path, url = baseUrl + "#view=fit&toolbar=0&statusbar=0&messages=0&navpanes=0";
            return $sce.trustAsResourceUrl(url);
        }, init();
    }
    angular.module("essMyInfo").controller("AckDocViewCtrl", [ "$scope", "$routeParams", "$q", "$location", "$window", "$timeout", "$sce", "bowser", "appProps", "modals", "AckDocApi", "AcknowledgmentApi", acknowledgmentCtrl ]);
}(), function() {
    function acknowledgmentCtrl($scope, $q, appProps, modals, documentApi, ackApi) {
        function getDocuments() {
            function onSuccess(resp) {
                $scope.state.documents.unsorted = resp.documents;
            }
            return $scope.state.documents.unsorted = [], $scope.state.request.documents = !0, 
            documentApi.get({}, onSuccess, $scope.handleErrorResponse).$promise.finally(function() {
                $scope.state.request.documents = !1;
            });
        }
        function getAcknowledgments() {
            function onSuccess(resp) {
                angular.forEach(resp.acknowledgments, function(ack) {
                    $scope.state.acknowledgments[ack.ackDocId] = ack;
                });
            }
            $scope.state.acknowledgments = {};
            var params = {
                empId: appProps.user.employeeId
            };
            return $scope.state.request.ack = !0, ackApi.get(params, onSuccess, $scope.handleErrorResponse).$promise.finally(function() {
                $scope.state.request.ack = !1;
            });
        }
        function sortDocuments() {
            var documents = $scope.state.documents;
            for (documents.acknowledged = [], documents.unacknowledged = []; documents.unsorted.length > 0; ) {
                var doc = documents.unsorted.shift();
                $scope.state.acknowledgments[doc.id] ? documents.acknowledged.push(doc) : documents.unacknowledged.push(doc);
            }
        }
        var initialState = {
            documents: {
                unsorted: [],
                acknowledged: [],
                unacknowledged: []
            },
            acknowledgments: {},
            request: {
                documents: !1,
                ack: !1
            }
        };
        $scope.isLoading = function() {
            var loading = !1;
            return angular.forEach($scope.state.request, function(status) {
                loading = loading || status;
            }), loading;
        }, $scope.getAcknowledgedDate = function(doc) {
            var acknowledgment = $scope.state.acknowledgments[doc.id];
            if (acknowledgment) return acknowledgment.timestamp;
            throw "No acknowledgment for doc " + doc.id + ": " + doc.title;
        }, $scope.anyAckDocs = function() {
            return $scope.state.documents.acknowledged.length > 0 || $scope.state.documents.unacknowledged.length > 0;
        }, function() {
            $scope.state = angular.copy(initialState), $q.all([ getDocuments(), getAcknowledgments() ]).then(sortDocuments);
        }();
    }
    angular.module("essMyInfo").controller("AcknowledgmentCtrl", [ "$scope", "$q", "appProps", "modals", "AckDocApi", "AcknowledgmentApi", acknowledgmentCtrl ]);
}(), angular.module("essMyInfo").controller("AlertCtrl", [ "$scope", "$timeout", "$filter", "appProps", "modals", "AlertInfoApi", alertCtrl ]);

var essMyInfo = angular.module("essMyInfo");

essMyInfo.controller("EmpSummaryCtrl", [ "$scope", "$http", "appProps", "EmpInfoApi", "EmpActiveYearsApi", "EmpTransactionsApi", "EmpTransactionCurrentSnapshotApi", "modals", function($scope, $http, appProps, EmpInfoApi, EmpActiveYearsApi, EmpTransactionsApi, EmpTransactionCurrentSnapshotApi, modals) {
    $scope.state = {
        empId: appProps.user.employeeId,
        emp: null
    }, $scope.fetchEmployeeData = function() {
        EmpInfoApi.get({
            empId: $scope.state.empId,
            detail: !0
        }, function(resp) {
            resp.success && ($scope.state.emp = resp.employee), EmpTransactionCurrentSnapshotApi.get({
                empId: $scope.state.empId
            }, function(resp) {
                resp.success && ($scope.state.emp.snapshot = resp.snapshot.items);
            });
        });
    }, $scope.init = function() {
        $scope.fetchEmployeeData();
    }, $scope.init();
} ]);

var essMyInfo = angular.module("essMyInfo");

essMyInfo.controller("EmpTransactionHistoryCtrl", [ "$scope", "$http", "appProps", "$q", "EmpTransactionTimelineApi", "modals", function($scope, $http, appProps, $q, EmpTransactionTimelineApi, modals) {
    $scope.state = {
        empId: appProps.user.employeeId,
        timeline: {}
    }, $scope.getTimeline = function() {
        var deferred = $q.defer();
        return EmpTransactionTimelineApi.get({
            empId: $scope.state.empId
        }, function(resp) {
            if (resp.success && resp.total > 0) {
                var seenTx = {};
                angular.forEach(resp.transactions.reverse(), function(tx) {
                    $scope.state.timeline[tx.effectDate] || ($scope.state.timeline[tx.effectDate] = []), 
                    seenTx[tx.effectDate] || (seenTx[tx.effectDate] = {}), seenTx[tx.effectDate][tx.transCode] || ($scope.state.timeline[tx.effectDate].push(tx), 
                    seenTx[tx.effectDate][tx.transCode] = !0);
                }), seenTx = null;
            } else $scope.state.timeline = !1;
            deferred.resolve();
        }, function(resp) {
            $scope.state.timeline = !1, modals.open("500", {
                details: resp
            }), deferred.reject("Failed to retrieve timeline.");
        }), deferred;
    }, $scope.init = function() {
        $scope.getTimeline();
    }();
} ]);

var essMyInfo = angular.module("essMyInfo");

essMyInfo.filter("payTypeFilter", function() {
    return function(input) {
        switch (input) {
          case "RA":
            return "Regular Annual";

          case "SA":
            return "Special Annual";

          case "TE":
            return "Temporary Payroll";
        }
        return input;
    };
});
//# sourceMappingURL=ess-myinfo.min.js.map